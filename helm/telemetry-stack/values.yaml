# Default values for telemetry-stack
# This is a YAML-formatted file.

# Global settings
global:
  imagePullPolicy: Never

# Security configuration
security:
  # Single shared secret for REST API authentication
  # Users include this as X-API-Key header or Authorization: Bearer token
  apiKey: "telemetry-api-secret-2025"
  # Internal service-to-service authentication token
  serviceToken: "internal-service-token-2025"

# Kubernetes Secrets configuration
secrets:
  # Enable creation of Kubernetes secrets
  enabled: true
  # Use existing secret instead of creating new one (optional)
  # existingSecret: "my-existing-secret"
  # API key for REST API authentication
  apiKey: "telemetry-api-secret-2025"
  # Service token for internal service communication
  serviceToken: "internal-service-token-2025"

# InfluxDB configuration
influxdb:
  enabled: true
  image:
    repository: influxdb
    tag: "2.7"
  service:
    type: ClusterIP
    port: 8086
  persistence:
    enabled: true
    size: 1Gi
  env:
    initMode: setup
    adminUser: admin
    adminPassword: supersecretpassword
    org: telemetryorg
    bucket: telem_bucket
    adminToken: supersecrettoken

# API Service configuration
api:
  enabled: true
  name: api
  image:
    repository: api
    tag: latest
  service:
    type: ClusterIP
    port: 8080
  nodePort:
    enabled: true
    port: 30081
  env:
    influxdbUrl: "http://influxdb:8086"
    influxdbToken: "supersecrettoken"
    influxdbOrg: "telemetryorg"
    influxdbBucket: "telem_bucket"

# Collector configuration
collector:
  enabled: true
  name: collector
  image:
    repository: collector
    tag: latest
  service:
    type: ClusterIP
    port: 8081
  env:
    influxdbUrl: "http://influxdb:8086"
    influxdbToken: "supersecrettoken"
    influxdbOrg: "telemetryorg"
    influxdbBucket: "telem_bucket"
    msgQueueAddr: "http://msg-queue:8080"
    msgQueueTopic: "telemetry"
    msgQueueGroup: "telemetry_group"
    msgQueueConsumerName: "collector"

# Message Queue configuration
msgQueue:
  enabled: true
  name: msg-queue
  replicaCount: 1  # Scale to 2 replicas for load balancing
  useStatefulSet: false  # Use StatefulSet for proper broker indexing
  image:
    repository: msg-queue
    tag: latest
  service:
    type: ClusterIP  # Changed from ClusterIP to LoadBalancer
    port: 8080
    # Optional: specify external port
    # nodePort: 30080  # For NodePort type
  # Persistence configuration
  persistence:
    enabled: true  # Enable for StatefulSet with per-replica storage
    size: 1Gi
    # storageClass: ""  # Use default storage class
  env:
    port: "8080"
    brokerIndex: "0"      # Will be overridden by StatefulSet pod ordinal
    brokerCount: "1"      # Should match replicaCount for proper partitioning
    topics: "telemetry:4" # Example topics when multiple topics are needed partitions "events:8,orders:4,default:8"
  # Ingress configuration for advanced load balancing
  ingress:
    enabled: false  # Set to true to enable ingress
    annotations: {}
      # kubernetes.io/ingress.class: nginx
      # nginx.ingress.kubernetes.io/rewrite-target: /
    hosts:
      - host: msg-queue.local
        paths:
          - path: /
            pathType: Prefix
    tls: []
    #  - secretName: msg-queue-tls
    #    hosts:
    #      - msg-queue.local

# Streamer configuration
streamer:
  enabled: true
  name: streamer
  image:
    repository: streamer
    tag: latest
  service:
    type: ClusterIP
    port: 8080
  env:
    csvPath: "/data/dcgm_metrics_20250718_134233.csv"
    csvDelayMs: "1000"
    useHttpQueue: "true"
    port: "8080"
    msgQueueAddr: "http://msg-queue:8080"
    msgQueueTopic: "telemetry"
    msgQueueGroup: "telemetry_group"
    msgQueueProducerName: "streamer"
  volume:
    enabled: false
    hostPath: "/run/desktop/mnt/host/c/Users/peaswaran/telemetry_Punitha"
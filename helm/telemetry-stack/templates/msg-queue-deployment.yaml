{{- if and .Values.msgQueue.enabled (not .Values.msgQueue.useStatefulSet) }}
{{- if and .Values.msgQueue.persistence.enabled (eq (.Values.msgQueue.replicaCount | int) 1) }}
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: msg-queue-pvc
  labels:
    app: {{ .Values.msgQueue.name }}
    chart: {{ include "telemetry-stack.chart" . }}
    release: {{ .Release.Name }}
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: {{ .Values.msgQueue.persistence.size }}
---
{{- end }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.msgQueue.name }}
  labels:
    app: {{ .Values.msgQueue.name }}
    chart: {{ include "telemetry-stack.chart" . }}
    release: {{ .Release.Name }}
spec:
  replicas: {{ .Values.msgQueue.replicaCount }}
  selector:
    matchLabels:
      app: {{ .Values.msgQueue.name }}
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ .Values.msgQueue.name }}
        release: {{ .Release.Name }}
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        # "{{ .Values.msgQueue.service.port }}"
        prometheus.io/path: "/metrics"
    spec:
      containers:
      - name: {{ .Values.msgQueue.name }}
        image: "{{ .Values.msgQueue.image.repository }}:{{ .Values.msgQueue.image.tag }}"
        imagePullPolicy: {{ .Values.global.imagePullPolicy }}
        ports:
        - containerPort: {{ .Values.msgQueue.service.port }}
        env:
        - name: PORT
          value: {{ .Values.msgQueue.service.port | quote }}
        - name: BROKER_INDEX
          value: {{ .Values.msgQueue.env.brokerIndex | quote }}
        - name: BROKER_COUNT
          value: {{ .Values.msgQueue.env.brokerCount | quote }}
        - name: TOPICS
          value: {{ .Values.msgQueue.env.topics | quote }}
        # Security credentials from Kubernetes secrets
        - name: SERVICE_TOKEN
          valueFrom:
            secretKeyRef:
              name: {{ include "telemetry-stack.secretName" . }}
              key: service-token
        # Add health checks
        readinessProbe:
          httpGet:
            path: {{ .Values.msgQueue.healthCheck.path }}
            port: {{ .Values.msgQueue.service.port }}
          initialDelaySeconds: {{ .Values.msgQueue.healthCheck.readinessInitialDelaySeconds }}
          periodSeconds: {{ .Values.msgQueue.healthCheck.readinessPeriodSeconds }}
          timeoutSeconds: {{ .Values.msgQueue.healthCheck.readinessTimeoutSeconds }}
          failureThreshold: {{ .Values.msgQueue.healthCheck.readinessFailureThreshold }}
        livenessProbe:
          httpGet:
            path: {{ .Values.msgQueue.healthCheck.path }}
            port: {{ .Values.msgQueue.service.port }}
          initialDelaySeconds: {{ .Values.msgQueue.healthCheck.initialDelaySeconds }}
          periodSeconds: {{ .Values.msgQueue.healthCheck.periodSeconds }}
          timeoutSeconds: {{ .Values.msgQueue.healthCheck.timeoutSeconds }}
          failureThreshold: {{ .Values.msgQueue.healthCheck.failureThreshold }}
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
        {{- if and .Values.msgQueue.persistence.enabled (eq (.Values.msgQueue.replicaCount | int) 1) }}
        volumeMounts:
        - name: msg-queue-storage
          mountPath: /root/data
        {{- end }}
      {{- if and .Values.msgQueue.persistence.enabled (eq (.Values.msgQueue.replicaCount | int) 1) }}
      volumes:
      - name: msg-queue-storage
        persistentVolumeClaim:
          claimName: msg-queue-pvc
      {{- end }}
{{- end }}